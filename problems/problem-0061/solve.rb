#!/usr/bin/env ruby
# ---------------------------------------------------------------------------------------------------------------------
# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and
# are generated by the following formulae:
# 
#       Triangle       P3,n = n(n+1)/2      1, 3, 6,  10, 15, ...
#       Square         P4,n = n^2           1, 4, 9,  16, 25, ...
#       Pentagonal     P5,n = n(3n−1)/2     1, 5, 12, 22, 35, ...
#       Hexagonal      P6,n = n(2n−1)       1, 6, 15, 28, 45, ...
#       Heptagonal     P7,n = n(5n−3)/2	    1, 7, 18, 34, 55, ...
#       Octagonal      P8,n = n(3n−2)       1, 8, 21, 40, 65, ...
#
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
# 
# 1) The set is cyclic, in that the last two digits of each number is the first two digits of the next number
#    (including the last number with the first).
# 2) Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by
#    a different number in the set.
# 3) This is the only set of 4-digit numbers with this property.
#
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square,
# pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
#
# ---------------------------------------------------------------------------------------------------------------------

require_relative "../lib/incrementor"

def build_values
  r = []
  i = 1
  while true
    p = yield i
    i += 1
    if p > 9999
      break
    end
    if p > 999
      r.push p
    end
  end
  r
end

def match(m, n)
  m % 100 == n / 100
end

def build_set(sets, target_values)
  results = []
  sets.each {|set|
    n = set.last
    # inefficient to search the whole set... make an index?
    target_values.each {|value|
      if match(n, value)
        results.push (set + [value])
      end
    }
  }
  results
end

if __FILE__ == $0

  p3 = build_values {|n| n * (n+1)/2}
  p4 = build_values {|n| n ** 2}
  p5 = build_values {|n| n * (3*n - 1)/2}
  p6 = build_values {|n| n * (2 * n - 1)}
  p7 = build_values {|n| n * (5*n - 3)/2}
  p8 = build_values {|n| n * (3*n - 2)}


  [p4,p5,p6,p7,p8].permutation {|target_values|
    sets = p3.map{|n| [n]}
    sets = build_set(sets, target_values[0])
    sets = build_set(sets, target_values[1])
    sets = build_set(sets, target_values[2])
    sets = build_set(sets, target_values[3])
    sets = build_set(sets, target_values[4])
    sets.each {|set|
      if match(set[5],set[0])
        puts set.inspect
        puts set.inject(:+)
      end
    }
  }
end
